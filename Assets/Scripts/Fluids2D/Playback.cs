
using UdonSharp;
using UnityEngine;
using VRC.SDKBase;
using VRC.Udon;

public class Playback : UdonSharpBehaviour
{
    private float[] history;
    private Pourer pourer;
    private int row = 0;
    private float triggerInputTime;
    private float currentTime;


    private int DT = 0;
    private int COORD_X = 1;
    private int COORD_Y = 2;
    private int PREV_COORD_X = 3;
    private int PREV_COORD_Y = 4;
    private int DELTA_X = 5;
    private int DELTA_Y = 6;
    private int ROW_SIZE = 7;

    void Start()
    {
        pourer = GetComponent<Pourer>();
        // dt, coordX, coordY, prevCoordX, prevCoordY, deltaX, deltaY
        // all in one-dimensional array because VRChat doesn't support 2D arrays
        history = new float[] {
            1.000f, 0.28958333333333336f, 0.6740506329113924f, 0.28958333333333336f, 0.6772151898734178f, 0f, -0.001041666666666672f,
            0.016f, 0.28958333333333336f, 0.6645569620253164f, 0.28958333333333336f, 0.6740506329113924f, 0f, -0.0031250000000000167f,
            0.017f, 0.28958333333333336f, 0.6534810126582278f, 0.28958333333333336f, 0.6645569620253164f, 0f, -0.0036458333333333525f,
            0.016f, 0.28958333333333336f, 0.6439873417721519f, 0.28958333333333336f, 0.6534810126582278f, 0f, -0.00312499999999998f,
            0.017f, 0.28958333333333336f, 0.6313291139240507f, 0.28958333333333336f, 0.6439873417721519f, 0f, -0.004166666666666652f,
            0.018f, 0.2890625f, 0.615506329113924f, 0.28958333333333336f, 0.6313291139240507f, -0.0005208333333333592f, -0.005208333333333361f,
            0.016f, 0.28802083333333334f, 0.5965189873417722f, 0.2890625f, 0.615506329113924f, -0.001041666666666663f, -0.00624999999999996f,
            0.016f, 0.2869791666666667f, 0.5806962025316456f, 0.28802083333333334f, 0.5965189873417722f, -0.001041666666666663f, -0.005208333333333361f,
            0.017f, 0.2864583333333333f, 0.564873417721519f, 0.2869791666666667f, 0.5806962025316456f, -0.0005208333333333592f, -0.005208333333333324f,
            0.017f, 0.2859375f, 0.5553797468354431f, 0.2864583333333333f, 0.564873417721519f, -0.0005208333333333037f, -0.00312499999999998f,
            0.016f, 0.2859375f, 0.5474683544303798f, 0.2859375f, 0.5553797468354431f, 0f, -0.0026041666666666804f,
            0.017f, 0.2859375f, 0.5458860759493671f, 0.2859375f, 0.5474683544303798f, 0f, -0.000520833333333336f,
            0.066f, 0.2859375f, 0.5506329113924051f, 0.2859375f, 0.5458860759493671f, 0f, 0.0015625000000000083f,
            0.368f, 0.28854166666666664f, 0.6946202531645569f, 0.28802083333333334f, 0.6962025316455696f, 0.0005208333333333037f, -0.000520833333333336f,
            0.017f, 0.28854166666666664f, 0.689873417721519f, 0.28854166666666664f, 0.6946202531645569f, 0f, -0.0015624999999999717f,
            0.017f, 0.28854166666666664f, 0.685126582278481f, 0.28854166666666664f, 0.689873417721519f, 0f, -0.0015625000000000083f,
            0.016f, 0.2890625f, 0.6740506329113924f, 0.28854166666666664f, 0.685126582278481f, 0.0005208333333333592f, -0.003645833333333316f,
            0.016f, 0.2890625f, 0.6661392405063291f, 0.2890625f, 0.6740506329113924f, 0f, -0.0026041666666666804f,
            0.017f, 0.28958333333333336f, 0.6550632911392404f, 0.2890625f, 0.6661392405063291f, 0.0005208333333333592f, -0.0036458333333333525f,
            0.016f, 0.28958333333333336f, 0.6424050632911392f, 0.28958333333333336f, 0.6550632911392404f, 0f, -0.004166666666666652f,
            0.017f, 0.28958333333333336f, 0.629746835443038f, 0.28958333333333336f, 0.6424050632911392f, 0f, -0.004166666666666652f,
            0.017f, 0.28958333333333336f, 0.6218354430379747f, 0.28958333333333336f, 0.629746835443038f, 0f, -0.0026041666666666804f,
            0.017f, 0.28958333333333336f, 0.6170886075949367f, 0.28958333333333336f, 0.6218354430379747f, 0f, -0.0015625000000000083f,
            0.016f, 0.28958333333333336f, 0.615506329113924f, 0.28958333333333336f, 0.6170886075949367f, 0f, -0.000520833333333336f,
            0.017f, 0.28958333333333336f, 0.6139240506329113f, 0.28958333333333336f, 0.615506329113924f, 0f, -0.000520833333333336f,
            0.017f, 0.28958333333333336f, 0.6123417721518987f, 0.28958333333333336f, 0.6139240506329113f, 0f, -0.000520833333333336f,
            0.016f, 0.28958333333333336f, 0.610759493670886f, 0.28958333333333336f, 0.6123417721518987f, 0f, -0.000520833333333336f,
            0.017f, 0.2890625f, 0.6044303797468354f, 0.28958333333333336f, 0.610759493670886f, -0.0005208333333333592f, -0.0020833333333333077f,
            0.016f, 0.2875f, 0.5901898734177216f, 0.2890625f, 0.6044303797468354f, -0.0015625000000000222f, -0.0046874999999999886f,
            0.017f, 0.2859375f, 0.5775316455696202f, 0.2875f, 0.5901898734177216f, -0.0015624999999999667f, -0.004166666666666688f,
            0.017f, 0.28489583333333335f, 0.5696202531645569f, 0.2859375f, 0.5775316455696202f, -0.001041666666666663f, -0.0026041666666666804f,
            0.533f, 0.2890625f, 0.7041139240506329f, 0.2890625f, 0.7056962025316456f, 0f, -0.000520833333333336f,
            0.017f, 0.2890625f, 0.6977848101265822f, 0.2890625f, 0.7041139240506329f, 0f, -0.002083333333333344f,
            0.017f, 0.2890625f, 0.689873417721519f, 0.2890625f, 0.6977848101265822f, 0f, -0.002604166666666644f,
            0.017f, 0.2890625f, 0.6787974683544304f, 0.2890625f, 0.689873417721519f, 0f, -0.003645833333333316f,
            0.017f, 0.2890625f, 0.6645569620253164f, 0.2890625f, 0.6787974683544304f, 0f, -0.004687500000000025f,
            0.016f, 0.2890625f, 0.6534810126582278f, 0.2890625f, 0.6645569620253164f, 0f, -0.0036458333333333525f,
            0.017f, 0.2890625f, 0.6455696202531646f, 0.2890625f, 0.6534810126582278f, 0f, -0.002604166666666644f,
            0.017f, 0.2890625f, 0.6360759493670887f, 0.2890625f, 0.6455696202531646f, 0f, -0.00312499999999998f,
            0.016f, 0.2890625f, 0.6265822784810127f, 0.2890625f, 0.6360759493670887f, 0f, -0.0031250000000000167f,
            0.017f, 0.2890625f, 0.615506329113924f, 0.2890625f, 0.6265822784810127f, 0f, -0.0036458333333333525f,
            0.017f, 0.2890625f, 0.6044303797468354f, 0.2890625f, 0.615506329113924f, 0f, -0.003645833333333316f,
            0.016f, 0.2890625f, 0.5917721518987342f, 0.2890625f, 0.6044303797468354f, 0f, -0.004166666666666652f,
            0.016f, 0.28854166666666664f, 0.5791139240506329f, 0.2890625f, 0.5917721518987342f, -0.0005208333333333592f, -0.004166666666666688f,
            0.017f, 0.28854166666666664f, 0.5712025316455696f, 0.28854166666666664f, 0.5791139240506329f, 0f, -0.0026041666666666804f,
            0.017f, 0.2875f, 0.5632911392405063f, 0.28854166666666664f, 0.5712025316455696f, -0.001041666666666663f, -0.002604166666666644f,
            0.016f, 0.2875f, 0.5553797468354431f, 0.2875f, 0.5632911392405063f, 0f, -0.002604166666666644f,
            0.017f, 0.2869791666666667f, 0.5490506329113924f, 0.2875f, 0.5553797468354431f, -0.0005208333333333037f, -0.002083333333333344f,
            0.017f, 0.2869791666666667f, 0.5443037974683544f, 0.2869791666666667f, 0.5490506329113924f, 0f, -0.0015625000000000083f,
            0.617f, 0.28958333333333336f, 0.6882911392405063f, 0.2890625f, 0.6930379746835442f, 0.0005208333333333592f, -0.0015624999999999717f,
            0.016f, 0.29010416666666666f, 0.6803797468354431f, 0.28958333333333336f, 0.6882911392405063f, 0.0005208333333333037f, -0.002604166666666644f,
            0.017f, 0.29010416666666666f, 0.6740506329113924f, 0.29010416666666666f, 0.6803797468354431f, 0f, -0.002083333333333344f,
            0.016f, 0.29010416666666666f, 0.6645569620253164f, 0.29010416666666666f, 0.6740506329113924f, 0f, -0.0031250000000000167f,
            0.017f, 0.29010416666666666f, 0.6518987341772151f, 0.29010416666666666f, 0.6645569620253164f, 0f, -0.004166666666666688f,
            0.017f, 0.28958333333333336f, 0.6329113924050633f, 0.29010416666666666f, 0.6518987341772151f, -0.0005208333333333037f, -0.00624999999999996f,
            0.016f, 0.2890625f, 0.6218354430379747f, 0.28958333333333336f, 0.6329113924050633f, -0.0005208333333333592f, -0.0036458333333333525f,
            0.017f, 0.28854166666666664f, 0.6091772151898734f, 0.2890625f, 0.6218354430379747f, -0.0005208333333333592f, -0.004166666666666652f,
            0.017f, 0.28854166666666664f, 0.5996835443037974f, 0.28854166666666664f, 0.6091772151898734f, 0f, -0.0031250000000000167f,
            0.017f, 0.28854166666666664f, 0.5933544303797469f, 0.28854166666666664f, 0.5996835443037974f, 0f, -0.0020833333333333077f,
            0.016f, 0.28854166666666664f, 0.5870253164556962f, 0.28854166666666664f, 0.5933544303797469f, 0f, -0.002083333333333344f,
            0.017f, 0.28802083333333334f, 0.5838607594936709f, 0.28854166666666664f, 0.5870253164556962f, -0.0005208333333333037f, -0.001041666666666672f,
            0.018f, 0.2875f, 0.5806962025316456f, 0.28802083333333334f, 0.5838607594936709f, -0.0005208333333333592f, -0.001041666666666672f,
            0.017f, 0.2875f, 0.5775316455696202f, 0.2875f, 0.5806962025316456f, 0f, -0.001041666666666672f,
            0.017f, 0.2875f, 0.5727848101265822f, 0.2875f, 0.5775316455696202f, 0f, -0.0015625000000000083f,
            0.015f, 0.2875f, 0.5664556962025317f, 0.2875f, 0.5727848101265822f, 0f, -0.0020833333333333077f,
            0.017f, 0.2875f, 0.5585443037974683f, 0.2875f, 0.5664556962025317f, 0f, -0.0026041666666666804f,
            0.016f, 0.2875f, 0.5537974683544304f, 0.2875f, 0.5585443037974683f, 0f, -0.0015624999999999717f,
            0.017f, 0.2875f, 0.5522151898734178f, 0.2875f, 0.5537974683544304f, 0f, -0.000520833333333336f,
        };

        row = 0;
        currentTime = 0f;
        triggerInputTime = history[row * ROW_SIZE + DT];

        pourer.Initialize(new Vector2(history[row * ROW_SIZE + PREV_COORD_X], history[row * ROW_SIZE + PREV_COORD_Y]));
    }

    void Update () {
        float dt = Time.deltaTime;
        currentTime += dt;

        if (currentTime > triggerInputTime) {
            pourer.Move(new Vector2(history[row * ROW_SIZE + COORD_X], history[row * ROW_SIZE + COORD_Y]));

            row = (row + 1) % (history.Length / ROW_SIZE);
            float nextTriggerInputTime = history[row * ROW_SIZE + DT];
            triggerInputTime += nextTriggerInputTime;

            if (nextTriggerInputTime > 0.1f) {
                pourer.Reset();
                pourer.Initialize(new Vector2(history[row * ROW_SIZE + PREV_COORD_X], history[row * ROW_SIZE + PREV_COORD_Y]));
            }
        }
    }
}
